// Copyright Epic Games, Inc. All Rights Reserved.

#pragma once

#include "AudioDrivenAnimationConfig.h"

#include "Curves/RealCurve.h"
#include "GameFramework/Actor.h"
#include "MetaHumanSpeechProcessingSettings.generated.h"


USTRUCT(BlueprintType)
struct FMetaHumanSpeechProcessingSettings
{
	GENERATED_USTRUCT_BODY()

public:
	/** Option to generate blinks */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings");
	bool bGenerateBlinks = true;

	/** Option to down mix audio channels into single channel before processing */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings");
	bool bMixAudioChannels = true;

	/** Audio channel used for processing */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (EditCondition = "bMixAudioChannels == false", ClampMin = 0, ClampMax = 64));
	int32 AudioChannelIndex = 0;

	/** Process the full face or a particular subset of controls. */
	UPROPERTY(EditAnywhere, Category = "Processing Settings", meta = (DisplayName = "Process Mask"))
	EAudioDrivenAnimationOutputControls OutputControls = EAudioDrivenAnimationOutputControls::FullFace;

	/** Overrides for the solve. */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (DisplayName = "Solve Overrides"))
	FAudioDrivenAnimationSolveOverrides SolveOverrides;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bEnableHeadMovement = true;
};

USTRUCT(BlueprintType)
struct FExportAnimSequenceSettings
{
	GENERATED_USTRUCT_BODY()

public:
	/** Option to override existing output assets. Otherwise, a unique asset name is generated by appending a number at the end of the asset name*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bOverwriteAssets = false;

	/** The Skeleton or Skeletal Mesh to be used when recording the Animation Sequence */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", meta = (AllowedClasses = "/Script/Engine.Skeleton, /Script/Engine.SkeletalMesh"))
	TSoftObjectPtr<UObject> TargetSkeletonOrSkeletalMesh;
	

	/** This defines how values between keys are calculated for curves */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	TEnumAsByte<ERichCurveInterpMode> CurveInterpolation = ERichCurveInterpMode::RCIM_Linear;
};

USTRUCT(BlueprintType)
struct FExportLevelSequenceSettings
{
	GENERATED_USTRUCT_BODY()

public:
	/** Option to override existing output assets. Otherwise, a unique asset name is generated by appending a number at the end of the asset name*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bOverwriteAssets = false;

	/** This defines how values between keys are calculated for curves */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	TEnumAsByte<ERichCurveInterpMode> CurveInterpolation = ERichCurveInterpMode::RCIM_Linear;

	/** Target actor to be spawned in the exported level sequence */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", DisplayName = "Target MetaHuman Class")
	TSoftObjectPtr<class UBlueprint> TargetMetaHumanClass;

	/** Option to export the audio track in the level sequence */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bExportAudioTrack = true;

	/** Option to export the camera track in the level sequence */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bExportCamera = true;

	/** Option to override existing output assets. Otherwise, a unique asset name is generated by appending a number at the end of the asset name*/
	/*UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bOverwriteAssets = false;*/
};

UCLASS(BlueprintType)
class UMetaHumanSpeechToPerformance
	: public UObject
{
GENERATED_BODY()

public:
	/** The visualization mesh to be set in the MetaHuman performances */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (AllowedClasses = "/Script/Engine.Skeleton, /Script/Engine.SkeletalMesh"))
	TSoftObjectPtr<UObject> VisualizationMesh;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (ShowOnlyInnerProperties));
	FMetaHumanSpeechProcessingSettings ProcessingSettings;

	/** Option to override existing output assets. Otherwise, a unique asset name is generated by appending a number at the end of the asset name*/
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings");
	bool bOverwriteAssets = false;
};

UCLASS(BlueprintType)
class UMetaHumanExportAnimSequenceSettings
	: public UObject
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", meta = (ShowOnlyInnerProperties));
	FExportAnimSequenceSettings ExportSettings;
};


UCLASS(BlueprintType)
class UMetaHumanSpeechToAnimSequenceProcessingSettings
	: public UObject
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (ShowOnlyInnerProperties));
	FMetaHumanSpeechProcessingSettings ProcessingSettings;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", meta = (ShowOnlyInnerProperties));
	FExportAnimSequenceSettings ExportSettings;
};


UCLASS(BlueprintType)
class UMetaHumanExportLevelSequenceSettings
	: public UObject
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", meta = (ShowOnlyInnerProperties));
	FExportLevelSequenceSettings ExportSettings;
};

UCLASS(BlueprintType)
class UMetaHumanSpeechToLevelSequenceSettings
	: public UObject
{
	GENERATED_BODY()
public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Processing Settings", meta = (ShowOnlyInnerProperties));
	FMetaHumanSpeechProcessingSettings ProcessingSettings;
	
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Export Settings", meta = (ShowOnlyInnerProperties));
	FExportLevelSequenceSettings ExportSettings;
};
