// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metahuman_service_api.proto

#include "metahuman_service_api.pb.h.inc"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace metahuman_service_api {
constexpr Vertex::Vertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct VertexDefaultTypeInternal {
  constexpr VertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VertexDefaultTypeInternal() {}
  union {
    Vertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VertexDefaultTypeInternal _Vertex_default_instance_;
constexpr Mesh::Mesh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_(){}
struct MeshDefaultTypeInternal {
  constexpr MeshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeshDefaultTypeInternal() {}
  union {
    Mesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeshDefaultTypeInternal _Mesh_default_instance_;
constexpr Eyes::Eyes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(nullptr)
  , right_(nullptr)
  , edge_(nullptr)
  , shell_(nullptr)
  , lashes_(nullptr){}
struct EyesDefaultTypeInternal {
  constexpr EyesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EyesDefaultTypeInternal() {}
  union {
    Eyes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EyesDefaultTypeInternal _Eyes_default_instance_;
constexpr Head::Head(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : face_(nullptr)
  , eyes_(nullptr)
  , teeth_(nullptr)
  , cartilage_(nullptr)
  , saliva_(nullptr){}
struct HeadDefaultTypeInternal {
  constexpr HeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeadDefaultTypeInternal() {}
  union {
    Head _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeadDefaultTypeInternal _Head_default_instance_;
constexpr Parameters::Parameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bind_pose_()
  , solver_coefficients_()
  , model_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ParametersDefaultTypeInternal {
  constexpr ParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParametersDefaultTypeInternal() {}
  union {
    Parameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParametersDefaultTypeInternal _Parameters_default_instance_;
constexpr Quality::Quality(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rig_type_(0)

  , refinement_level_(0)

  , export_layers_(0)
{}
struct QualityDefaultTypeInternal {
  constexpr QualityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QualityDefaultTypeInternal() {}
  union {
    Quality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QualityDefaultTypeInternal _Quality_default_instance_;
constexpr UEVersion::UEVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : major_(0u)
  , minor_(0u){}
struct UEVersionDefaultTypeInternal {
  constexpr UEVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UEVersionDefaultTypeInternal() {}
  union {
    UEVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UEVersionDefaultTypeInternal _UEVersion_default_instance_;
constexpr AutorigRequest::AutorigRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(nullptr)
  , parameters_(nullptr)
  , quality_(nullptr)
  , ue_version_(nullptr)
  , high_frequency_index_(0)
  , to_target_scale_(0){}
struct AutorigRequestDefaultTypeInternal {
  constexpr AutorigRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AutorigRequestDefaultTypeInternal() {}
  union {
    AutorigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AutorigRequestDefaultTypeInternal _AutorigRequest_default_instance_;
}  // namespace metahuman_service_api
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metahuman_5fservice_5fapi_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_metahuman_5fservice_5fapi_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metahuman_5fservice_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metahuman_5fservice_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Vertex, y_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Vertex, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Mesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Mesh, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, left_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, right_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, edge_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, shell_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Eyes, lashes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, face_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, eyes_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, teeth_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, cartilage_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Head, saliva_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Parameters, bind_pose_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Parameters, solver_coefficients_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Parameters, model_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Quality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Quality, rig_type_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Quality, refinement_level_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::Quality, export_layers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::UEVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::UEVersion, major_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::UEVersion, minor_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, head_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, high_frequency_index_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, to_target_scale_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, parameters_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, quality_),
  PROTOBUF_FIELD_OFFSET(::metahuman_service_api::AutorigRequest, ue_version_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::metahuman_service_api::Vertex)},
  { 9, -1, -1, sizeof(::metahuman_service_api::Mesh)},
  { 16, -1, -1, sizeof(::metahuman_service_api::Eyes)},
  { 27, -1, -1, sizeof(::metahuman_service_api::Head)},
  { 38, -1, -1, sizeof(::metahuman_service_api::Parameters)},
  { 47, -1, -1, sizeof(::metahuman_service_api::Quality)},
  { 56, -1, -1, sizeof(::metahuman_service_api::UEVersion)},
  { 64, 76, -1, sizeof(::metahuman_service_api::AutorigRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Vertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Mesh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Eyes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Head_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_Quality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_UEVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::metahuman_service_api::_AutorigRequest_default_instance_),
};

const char descriptor_table_protodef_metahuman_5fservice_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033metahuman_service_api.proto\022\025metahuman"
  "_service_api\")\n\006Vertex\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
  " \001(\002\022\t\n\001z\030\003 \001(\002\"7\n\004Mesh\022/\n\010vertices\030\001 \003("
  "\0132\035.metahuman_service_api.Vertex\"\341\001\n\004Eye"
  "s\022)\n\004left\030\001 \001(\0132\033.metahuman_service_api."
  "Mesh\022*\n\005right\030\002 \001(\0132\033.metahuman_service_"
  "api.Mesh\022)\n\004edge\030\003 \001(\0132\033.metahuman_servi"
  "ce_api.Mesh\022*\n\005shell\030\004 \001(\0132\033.metahuman_s"
  "ervice_api.Mesh\022+\n\006lashes\030\005 \001(\0132\033.metahu"
  "man_service_api.Mesh\"\345\001\n\004Head\022)\n\004face\030\001 "
  "\001(\0132\033.metahuman_service_api.Mesh\022)\n\004eyes"
  "\030\002 \001(\0132\033.metahuman_service_api.Eyes\022*\n\005t"
  "eeth\030\003 \001(\0132\033.metahuman_service_api.Mesh\022"
  ".\n\tcartilage\030\004 \001(\0132\033.metahuman_service_a"
  "pi.Mesh\022+\n\006saliva\030\005 \001(\0132\033.metahuman_serv"
  "ice_api.Mesh\"N\n\nParameters\022\021\n\tbind_pose\030"
  "\001 \003(\002\022\033\n\023solver_coefficients\030\002 \003(\002\022\020\n\010mo"
  "del_id\030\003 \001(\t\"\271\001\n\007Quality\0220\n\010rig_type\030\001 \001"
  "(\0162\036.metahuman_service_api.RigType\022@\n\020re"
  "finement_level\030\002 \001(\0162&.metahuman_service"
  "_api.RefinementLevel\022:\n\rexport_layers\030\003 "
  "\001(\0162#.metahuman_service_api.ExportLayers"
  "\")\n\tUEVersion\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 "
  "\001(\r\"\244\002\n\016AutorigRequest\022)\n\004head\030\001 \001(\0132\033.m"
  "etahuman_service_api.Head\022\034\n\024high_freque"
  "ncy_index\030\002 \001(\005\022\027\n\017to_target_scale\030\003 \001(\002"
  "\022:\n\nparameters\030\004 \001(\0132!.metahuman_service"
  "_api.ParametersH\000\210\001\001\022/\n\007quality\030\005 \001(\0132\036."
  "metahuman_service_api.Quality\0224\n\nue_vers"
  "ion\030\006 \001(\0132 .metahuman_service_api.UEVers"
  "ionB\r\n\013_parameters*^\n\007RigType\022\024\n\020RIG_TYP"
  "E_UNKNOWN\020\000\022\030\n\024RIG_TYPE_JOINTS_ONLY\020\001\022#\n"
  "\037RIG_TYPE_JOINTS_AND_BLENDSHAPES\020\002*g\n\017Re"
  "finementLevel\022\034\n\030REFINEMENT_LEVEL_UNKNOW"
  "N\020\000\022\031\n\025REFINEMENT_LEVEL_NONE\020\001\022\033\n\027REFINE"
  "MENT_LEVEL_MEDIUM\020\002*X\n\014ExportLayers\022\031\n\025E"
  "XPORT_LAYERS_UNKNOWN\020\000\022\026\n\022EXPORT_LAYERS_"
  "NONE\020\001\022\025\n\021EXPORT_LAYERS_RBF\020\002BCZAgithub."
  "ol.epicgames.net/MHTech/mh-uemhc-autorig"
  "-service/api/protob\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metahuman_5fservice_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metahuman_5fservice_5fapi_2eproto = {
  false, false, 1586, descriptor_table_protodef_metahuman_5fservice_5fapi_2eproto, "metahuman_service_api.proto", 
  &descriptor_table_metahuman_5fservice_5fapi_2eproto_once, nullptr, 0, 8,
  schemas, file_default_instances, TableStruct_metahuman_5fservice_5fapi_2eproto::offsets,
  file_level_metadata_metahuman_5fservice_5fapi_2eproto, file_level_enum_descriptors_metahuman_5fservice_5fapi_2eproto, file_level_service_descriptors_metahuman_5fservice_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_metahuman_5fservice_5fapi_2eproto_getter() {
  return &descriptor_table_metahuman_5fservice_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_metahuman_5fservice_5fapi_2eproto(&descriptor_table_metahuman_5fservice_5fapi_2eproto);
namespace metahuman_service_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RigType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metahuman_5fservice_5fapi_2eproto);
  return file_level_enum_descriptors_metahuman_5fservice_5fapi_2eproto[0];
}
bool RigType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefinementLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metahuman_5fservice_5fapi_2eproto);
  return file_level_enum_descriptors_metahuman_5fservice_5fapi_2eproto[1];
}
bool RefinementLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExportLayers_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metahuman_5fservice_5fapi_2eproto);
  return file_level_enum_descriptors_metahuman_5fservice_5fapi_2eproto[2];
}
bool ExportLayers_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vertex::_Internal {
 public:
};

Vertex::Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Vertex)
}

void Vertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Vertex)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vertex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vertex::ArenaDtor(void* object) {
  Vertex* _this = reinterpret_cast< Vertex* >(object);
  (void)_this;
}
void Vertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Vertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Vertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vertex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vertex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vertex::GetClassData() const { return &_class_data_; }

void Vertex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vertex *>(to)->MergeFrom(
      static_cast<const Vertex &>(from));
}


void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vertex, z_)
      + sizeof(Vertex::z_)
      - PROTOBUF_FIELD_OFFSET(Vertex, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[0]);
}

// ===================================================================

class Mesh::_Internal {
 public:
};

Mesh::Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Mesh)
}
Mesh::Mesh(const Mesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Mesh)
}

void Mesh::SharedCtor() {
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Mesh)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Mesh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Mesh::ArenaDtor(void* object) {
  Mesh* _this = reinterpret_cast< Mesh* >(object);
  (void)_this;
}
void Mesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Mesh::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .metahuman_service_api.Vertex vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Mesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .metahuman_service_api.Vertex vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Mesh)
  return target;
}

size_t Mesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Mesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metahuman_service_api.Vertex vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Mesh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Mesh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Mesh::GetClassData() const { return &_class_data_; }

void Mesh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Mesh *>(to)->MergeFrom(
      static_cast<const Mesh &>(from));
}


void Mesh::MergeFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Mesh)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Mesh::CopyFrom(const Mesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Mesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  return true;
}

void Mesh::InternalSwap(Mesh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[1]);
}

// ===================================================================

class Eyes::_Internal {
 public:
  static const ::metahuman_service_api::Mesh& left(const Eyes* msg);
  static const ::metahuman_service_api::Mesh& right(const Eyes* msg);
  static const ::metahuman_service_api::Mesh& edge(const Eyes* msg);
  static const ::metahuman_service_api::Mesh& shell(const Eyes* msg);
  static const ::metahuman_service_api::Mesh& lashes(const Eyes* msg);
};

const ::metahuman_service_api::Mesh&
Eyes::_Internal::left(const Eyes* msg) {
  return *msg->left_;
}
const ::metahuman_service_api::Mesh&
Eyes::_Internal::right(const Eyes* msg) {
  return *msg->right_;
}
const ::metahuman_service_api::Mesh&
Eyes::_Internal::edge(const Eyes* msg) {
  return *msg->edge_;
}
const ::metahuman_service_api::Mesh&
Eyes::_Internal::shell(const Eyes* msg) {
  return *msg->shell_;
}
const ::metahuman_service_api::Mesh&
Eyes::_Internal::lashes(const Eyes* msg) {
  return *msg->lashes_;
}
Eyes::Eyes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Eyes)
}
Eyes::Eyes(const Eyes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::metahuman_service_api::Mesh(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::metahuman_service_api::Mesh(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_edge()) {
    edge_ = new ::metahuman_service_api::Mesh(*from.edge_);
  } else {
    edge_ = nullptr;
  }
  if (from._internal_has_shell()) {
    shell_ = new ::metahuman_service_api::Mesh(*from.shell_);
  } else {
    shell_ = nullptr;
  }
  if (from._internal_has_lashes()) {
    lashes_ = new ::metahuman_service_api::Mesh(*from.lashes_);
  } else {
    lashes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Eyes)
}

void Eyes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lashes_) -
    reinterpret_cast<char*>(&left_)) + sizeof(lashes_));
}

Eyes::~Eyes() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Eyes)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Eyes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete edge_;
  if (this != internal_default_instance()) delete shell_;
  if (this != internal_default_instance()) delete lashes_;
}

void Eyes::ArenaDtor(void* object) {
  Eyes* _this = reinterpret_cast< Eyes* >(object);
  (void)_this;
}
void Eyes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Eyes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Eyes::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Eyes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && edge_ != nullptr) {
    delete edge_;
  }
  edge_ = nullptr;
  if (GetArenaForAllocation() == nullptr && shell_ != nullptr) {
    delete shell_;
  }
  shell_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lashes_ != nullptr) {
    delete lashes_;
  }
  lashes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Eyes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .metahuman_service_api.Mesh left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh edge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh shell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh lashes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lashes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Eyes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Eyes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metahuman_service_api.Mesh left = 1;
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::left(this), target, stream);
  }

  // .metahuman_service_api.Mesh right = 2;
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::right(this), target, stream);
  }

  // .metahuman_service_api.Mesh edge = 3;
  if (this->_internal_has_edge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::edge(this), target, stream);
  }

  // .metahuman_service_api.Mesh shell = 4;
  if (this->_internal_has_shell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::shell(this), target, stream);
  }

  // .metahuman_service_api.Mesh lashes = 5;
  if (this->_internal_has_lashes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lashes(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Eyes)
  return target;
}

size_t Eyes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Eyes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metahuman_service_api.Mesh left = 1;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .metahuman_service_api.Mesh right = 2;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .metahuman_service_api.Mesh edge = 3;
  if (this->_internal_has_edge()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edge_);
  }

  // .metahuman_service_api.Mesh shell = 4;
  if (this->_internal_has_shell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shell_);
  }

  // .metahuman_service_api.Mesh lashes = 5;
  if (this->_internal_has_lashes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lashes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Eyes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Eyes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Eyes::GetClassData() const { return &_class_data_; }

void Eyes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Eyes *>(to)->MergeFrom(
      static_cast<const Eyes &>(from));
}


void Eyes::MergeFrom(const Eyes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Eyes)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_left()) {
    _internal_mutable_left()->::metahuman_service_api::Mesh::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::metahuman_service_api::Mesh::MergeFrom(from._internal_right());
  }
  if (from._internal_has_edge()) {
    _internal_mutable_edge()->::metahuman_service_api::Mesh::MergeFrom(from._internal_edge());
  }
  if (from._internal_has_shell()) {
    _internal_mutable_shell()->::metahuman_service_api::Mesh::MergeFrom(from._internal_shell());
  }
  if (from._internal_has_lashes()) {
    _internal_mutable_lashes()->::metahuman_service_api::Mesh::MergeFrom(from._internal_lashes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Eyes::CopyFrom(const Eyes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Eyes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Eyes::IsInitialized() const {
  return true;
}

void Eyes::InternalSwap(Eyes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Eyes, lashes_)
      + sizeof(Eyes::lashes_)
      - PROTOBUF_FIELD_OFFSET(Eyes, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Eyes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[2]);
}

// ===================================================================

class Head::_Internal {
 public:
  static const ::metahuman_service_api::Mesh& face(const Head* msg);
  static const ::metahuman_service_api::Eyes& eyes(const Head* msg);
  static const ::metahuman_service_api::Mesh& teeth(const Head* msg);
  static const ::metahuman_service_api::Mesh& cartilage(const Head* msg);
  static const ::metahuman_service_api::Mesh& saliva(const Head* msg);
};

const ::metahuman_service_api::Mesh&
Head::_Internal::face(const Head* msg) {
  return *msg->face_;
}
const ::metahuman_service_api::Eyes&
Head::_Internal::eyes(const Head* msg) {
  return *msg->eyes_;
}
const ::metahuman_service_api::Mesh&
Head::_Internal::teeth(const Head* msg) {
  return *msg->teeth_;
}
const ::metahuman_service_api::Mesh&
Head::_Internal::cartilage(const Head* msg) {
  return *msg->cartilage_;
}
const ::metahuman_service_api::Mesh&
Head::_Internal::saliva(const Head* msg) {
  return *msg->saliva_;
}
Head::Head(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Head)
}
Head::Head(const Head& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_face()) {
    face_ = new ::metahuman_service_api::Mesh(*from.face_);
  } else {
    face_ = nullptr;
  }
  if (from._internal_has_eyes()) {
    eyes_ = new ::metahuman_service_api::Eyes(*from.eyes_);
  } else {
    eyes_ = nullptr;
  }
  if (from._internal_has_teeth()) {
    teeth_ = new ::metahuman_service_api::Mesh(*from.teeth_);
  } else {
    teeth_ = nullptr;
  }
  if (from._internal_has_cartilage()) {
    cartilage_ = new ::metahuman_service_api::Mesh(*from.cartilage_);
  } else {
    cartilage_ = nullptr;
  }
  if (from._internal_has_saliva()) {
    saliva_ = new ::metahuman_service_api::Mesh(*from.saliva_);
  } else {
    saliva_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Head)
}

void Head::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&face_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&saliva_) -
    reinterpret_cast<char*>(&face_)) + sizeof(saliva_));
}

Head::~Head() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Head)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Head::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete face_;
  if (this != internal_default_instance()) delete eyes_;
  if (this != internal_default_instance()) delete teeth_;
  if (this != internal_default_instance()) delete cartilage_;
  if (this != internal_default_instance()) delete saliva_;
}

void Head::ArenaDtor(void* object) {
  Head* _this = reinterpret_cast< Head* >(object);
  (void)_this;
}
void Head::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Head::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Head::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Head)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && face_ != nullptr) {
    delete face_;
  }
  face_ = nullptr;
  if (GetArenaForAllocation() == nullptr && eyes_ != nullptr) {
    delete eyes_;
  }
  eyes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && teeth_ != nullptr) {
    delete teeth_;
  }
  teeth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cartilage_ != nullptr) {
    delete cartilage_;
  }
  cartilage_ = nullptr;
  if (GetArenaForAllocation() == nullptr && saliva_ != nullptr) {
    delete saliva_;
  }
  saliva_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Head::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .metahuman_service_api.Mesh face = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_face(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Eyes eyes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_eyes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh teeth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_teeth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh cartilage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartilage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Mesh saliva = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_saliva(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Head::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Head)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metahuman_service_api.Mesh face = 1;
  if (this->_internal_has_face()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::face(this), target, stream);
  }

  // .metahuman_service_api.Eyes eyes = 2;
  if (this->_internal_has_eyes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::eyes(this), target, stream);
  }

  // .metahuman_service_api.Mesh teeth = 3;
  if (this->_internal_has_teeth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::teeth(this), target, stream);
  }

  // .metahuman_service_api.Mesh cartilage = 4;
  if (this->_internal_has_cartilage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cartilage(this), target, stream);
  }

  // .metahuman_service_api.Mesh saliva = 5;
  if (this->_internal_has_saliva()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::saliva(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Head)
  return target;
}

size_t Head::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Head)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metahuman_service_api.Mesh face = 1;
  if (this->_internal_has_face()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *face_);
  }

  // .metahuman_service_api.Eyes eyes = 2;
  if (this->_internal_has_eyes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eyes_);
  }

  // .metahuman_service_api.Mesh teeth = 3;
  if (this->_internal_has_teeth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teeth_);
  }

  // .metahuman_service_api.Mesh cartilage = 4;
  if (this->_internal_has_cartilage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cartilage_);
  }

  // .metahuman_service_api.Mesh saliva = 5;
  if (this->_internal_has_saliva()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *saliva_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Head::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Head::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Head::GetClassData() const { return &_class_data_; }

void Head::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Head *>(to)->MergeFrom(
      static_cast<const Head &>(from));
}


void Head::MergeFrom(const Head& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Head)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_face()) {
    _internal_mutable_face()->::metahuman_service_api::Mesh::MergeFrom(from._internal_face());
  }
  if (from._internal_has_eyes()) {
    _internal_mutable_eyes()->::metahuman_service_api::Eyes::MergeFrom(from._internal_eyes());
  }
  if (from._internal_has_teeth()) {
    _internal_mutable_teeth()->::metahuman_service_api::Mesh::MergeFrom(from._internal_teeth());
  }
  if (from._internal_has_cartilage()) {
    _internal_mutable_cartilage()->::metahuman_service_api::Mesh::MergeFrom(from._internal_cartilage());
  }
  if (from._internal_has_saliva()) {
    _internal_mutable_saliva()->::metahuman_service_api::Mesh::MergeFrom(from._internal_saliva());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Head::CopyFrom(const Head& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Head)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Head::IsInitialized() const {
  return true;
}

void Head::InternalSwap(Head* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Head, saliva_)
      + sizeof(Head::saliva_)
      - PROTOBUF_FIELD_OFFSET(Head, face_)>(
          reinterpret_cast<char*>(&face_),
          reinterpret_cast<char*>(&other->face_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Head::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[3]);
}

// ===================================================================

class Parameters::_Internal {
 public:
};

Parameters::Parameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bind_pose_(arena),
  solver_coefficients_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bind_pose_(from.bind_pose_),
      solver_coefficients_(from.solver_coefficients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model_id().empty()) {
    model_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Parameters)
}

void Parameters::SharedCtor() {
model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Parameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Parameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Parameters::ArenaDtor(void* object) {
  Parameters* _this = reinterpret_cast< Parameters* >(object);
  (void)_this;
}
void Parameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bind_pose_.Clear();
  solver_coefficients_.Clear();
  model_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float bind_pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_bind_pose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_bind_pose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float solver_coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_solver_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_solver_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string model_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_model_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "metahuman_service_api.Parameters.model_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float bind_pose = 1;
  if (this->_internal_bind_pose_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_bind_pose(), target);
  }

  // repeated float solver_coefficients = 2;
  if (this->_internal_solver_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_solver_coefficients(), target);
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_id().data(), static_cast<int>(this->_internal_model_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "metahuman_service_api.Parameters.model_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float bind_pose = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bind_pose_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated float solver_coefficients = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_solver_coefficients_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // string model_id = 3;
  if (!this->_internal_model_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Parameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Parameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Parameters::GetClassData() const { return &_class_data_; }

void Parameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Parameters *>(to)->MergeFrom(
      static_cast<const Parameters &>(from));
}


void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bind_pose_.MergeFrom(from.bind_pose_);
  solver_coefficients_.MergeFrom(from.solver_coefficients_);
  if (!from._internal_model_id().empty()) {
    _internal_set_model_id(from._internal_model_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bind_pose_.InternalSwap(&other->bind_pose_);
  solver_coefficients_.InternalSwap(&other->solver_coefficients_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_id_, lhs_arena,
      &other->model_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[4]);
}

// ===================================================================

class Quality::_Internal {
 public:
};

Quality::Quality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.Quality)
}
Quality::Quality(const Quality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rig_type_, &from.rig_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&export_layers_) -
    reinterpret_cast<char*>(&rig_type_)) + sizeof(export_layers_));
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.Quality)
}

void Quality::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rig_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&export_layers_) -
    reinterpret_cast<char*>(&rig_type_)) + sizeof(export_layers_));
}

Quality::~Quality() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.Quality)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Quality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quality::ArenaDtor(void* object) {
  Quality* _this = reinterpret_cast< Quality* >(object);
  (void)_this;
}
void Quality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quality::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.Quality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rig_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&export_layers_) -
      reinterpret_cast<char*>(&rig_type_)) + sizeof(export_layers_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .metahuman_service_api.RigType rig_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_rig_type(static_cast<::metahuman_service_api::RigType>(val));
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.RefinementLevel refinement_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_refinement_level(static_cast<::metahuman_service_api::RefinementLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.ExportLayers export_layers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_export_layers(static_cast<::metahuman_service_api::ExportLayers>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.Quality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metahuman_service_api.RigType rig_type = 1;
  if (this->_internal_rig_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rig_type(), target);
  }

  // .metahuman_service_api.RefinementLevel refinement_level = 2;
  if (this->_internal_refinement_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_refinement_level(), target);
  }

  // .metahuman_service_api.ExportLayers export_layers = 3;
  if (this->_internal_export_layers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_export_layers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.Quality)
  return target;
}

size_t Quality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.Quality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metahuman_service_api.RigType rig_type = 1;
  if (this->_internal_rig_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rig_type());
  }

  // .metahuman_service_api.RefinementLevel refinement_level = 2;
  if (this->_internal_refinement_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_refinement_level());
  }

  // .metahuman_service_api.ExportLayers export_layers = 3;
  if (this->_internal_export_layers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_export_layers());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Quality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quality::GetClassData() const { return &_class_data_; }

void Quality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Quality *>(to)->MergeFrom(
      static_cast<const Quality &>(from));
}


void Quality::MergeFrom(const Quality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.Quality)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rig_type() != 0) {
    _internal_set_rig_type(from._internal_rig_type());
  }
  if (from._internal_refinement_level() != 0) {
    _internal_set_refinement_level(from._internal_refinement_level());
  }
  if (from._internal_export_layers() != 0) {
    _internal_set_export_layers(from._internal_export_layers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quality::CopyFrom(const Quality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.Quality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quality::IsInitialized() const {
  return true;
}

void Quality::InternalSwap(Quality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quality, export_layers_)
      + sizeof(Quality::export_layers_)
      - PROTOBUF_FIELD_OFFSET(Quality, rig_type_)>(
          reinterpret_cast<char*>(&rig_type_),
          reinterpret_cast<char*>(&other->rig_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quality::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[5]);
}

// ===================================================================

class UEVersion::_Internal {
 public:
};

UEVersion::UEVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.UEVersion)
}
UEVersion::UEVersion(const UEVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.UEVersion)
}

void UEVersion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&major_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&minor_) -
    reinterpret_cast<char*>(&major_)) + sizeof(minor_));
}

UEVersion::~UEVersion() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.UEVersion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UEVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UEVersion::ArenaDtor(void* object) {
  UEVersion* _this = reinterpret_cast< UEVersion* >(object);
  (void)_this;
}
void UEVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UEVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UEVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.UEVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&minor_) -
      reinterpret_cast<char*>(&major_)) + sizeof(minor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UEVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UEVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.UEVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.UEVersion)
  return target;
}

size_t UEVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.UEVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->_internal_major() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->_internal_minor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_minor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UEVersion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UEVersion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UEVersion::GetClassData() const { return &_class_data_; }

void UEVersion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UEVersion *>(to)->MergeFrom(
      static_cast<const UEVersion &>(from));
}


void UEVersion::MergeFrom(const UEVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.UEVersion)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from._internal_minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UEVersion::CopyFrom(const UEVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.UEVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UEVersion::IsInitialized() const {
  return true;
}

void UEVersion::InternalSwap(UEVersion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UEVersion, minor_)
      + sizeof(UEVersion::minor_)
      - PROTOBUF_FIELD_OFFSET(UEVersion, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UEVersion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[6]);
}

// ===================================================================

class AutorigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutorigRequest>()._has_bits_);
  static const ::metahuman_service_api::Head& head(const AutorigRequest* msg);
  static const ::metahuman_service_api::Parameters& parameters(const AutorigRequest* msg);
  static void set_has_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::metahuman_service_api::Quality& quality(const AutorigRequest* msg);
  static const ::metahuman_service_api::UEVersion& ue_version(const AutorigRequest* msg);
};

const ::metahuman_service_api::Head&
AutorigRequest::_Internal::head(const AutorigRequest* msg) {
  return *msg->head_;
}
const ::metahuman_service_api::Parameters&
AutorigRequest::_Internal::parameters(const AutorigRequest* msg) {
  return *msg->parameters_;
}
const ::metahuman_service_api::Quality&
AutorigRequest::_Internal::quality(const AutorigRequest* msg) {
  return *msg->quality_;
}
const ::metahuman_service_api::UEVersion&
AutorigRequest::_Internal::ue_version(const AutorigRequest* msg) {
  return *msg->ue_version_;
}
AutorigRequest::AutorigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:metahuman_service_api.AutorigRequest)
}
AutorigRequest::AutorigRequest(const AutorigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::metahuman_service_api::Head(*from.head_);
  } else {
    head_ = nullptr;
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::metahuman_service_api::Parameters(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  if (from._internal_has_quality()) {
    quality_ = new ::metahuman_service_api::Quality(*from.quality_);
  } else {
    quality_ = nullptr;
  }
  if (from._internal_has_ue_version()) {
    ue_version_ = new ::metahuman_service_api::UEVersion(*from.ue_version_);
  } else {
    ue_version_ = nullptr;
  }
  ::memcpy(&high_frequency_index_, &from.high_frequency_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_target_scale_) -
    reinterpret_cast<char*>(&high_frequency_index_)) + sizeof(to_target_scale_));
  // @@protoc_insertion_point(copy_constructor:metahuman_service_api.AutorigRequest)
}

void AutorigRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&to_target_scale_) -
    reinterpret_cast<char*>(&head_)) + sizeof(to_target_scale_));
}

AutorigRequest::~AutorigRequest() {
  // @@protoc_insertion_point(destructor:metahuman_service_api.AutorigRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AutorigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
  if (this != internal_default_instance()) delete parameters_;
  if (this != internal_default_instance()) delete quality_;
  if (this != internal_default_instance()) delete ue_version_;
}

void AutorigRequest::ArenaDtor(void* object) {
  AutorigRequest* _this = reinterpret_cast< AutorigRequest* >(object);
  (void)_this;
}
void AutorigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AutorigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutorigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:metahuman_service_api.AutorigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(parameters_ != nullptr);
    parameters_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && quality_ != nullptr) {
    delete quality_;
  }
  quality_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ue_version_ != nullptr) {
    delete ue_version_;
  }
  ue_version_ = nullptr;
  ::memset(&high_frequency_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_target_scale_) -
      reinterpret_cast<char*>(&high_frequency_index_)) + sizeof(to_target_scale_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AutorigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .metahuman_service_api.Head head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 high_frequency_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          high_frequency_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float to_target_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          to_target_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .metahuman_service_api.Parameters parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.Quality quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .metahuman_service_api.UEVersion ue_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ue_version(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AutorigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:metahuman_service_api.AutorigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .metahuman_service_api.Head head = 1;
  if (this->_internal_has_head()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::head(this), target, stream);
  }

  // int32 high_frequency_index = 2;
  if (this->_internal_high_frequency_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_high_frequency_index(), target);
  }

  // float to_target_scale = 3;
  if (!(this->_internal_to_target_scale() <= 0 && this->_internal_to_target_scale() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_to_target_scale(), target);
  }

  // optional .metahuman_service_api.Parameters parameters = 4;
  if (_internal_has_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::parameters(this), target, stream);
  }

  // .metahuman_service_api.Quality quality = 5;
  if (this->_internal_has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::quality(this), target, stream);
  }

  // .metahuman_service_api.UEVersion ue_version = 6;
  if (this->_internal_has_ue_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ue_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:metahuman_service_api.AutorigRequest)
  return target;
}

size_t AutorigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metahuman_service_api.AutorigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .metahuman_service_api.Head head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // optional .metahuman_service_api.Parameters parameters = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameters_);
  }

  // .metahuman_service_api.Quality quality = 5;
  if (this->_internal_has_quality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_);
  }

  // .metahuman_service_api.UEVersion ue_version = 6;
  if (this->_internal_has_ue_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ue_version_);
  }

  // int32 high_frequency_index = 2;
  if (this->_internal_high_frequency_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_high_frequency_index());
  }

  // float to_target_scale = 3;
  if (!(this->_internal_to_target_scale() <= 0 && this->_internal_to_target_scale() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AutorigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AutorigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AutorigRequest::GetClassData() const { return &_class_data_; }

void AutorigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AutorigRequest *>(to)->MergeFrom(
      static_cast<const AutorigRequest &>(from));
}


void AutorigRequest::MergeFrom(const AutorigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metahuman_service_api.AutorigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::metahuman_service_api::Head::MergeFrom(from._internal_head());
  }
  if (from._internal_has_parameters()) {
    _internal_mutable_parameters()->::metahuman_service_api::Parameters::MergeFrom(from._internal_parameters());
  }
  if (from._internal_has_quality()) {
    _internal_mutable_quality()->::metahuman_service_api::Quality::MergeFrom(from._internal_quality());
  }
  if (from._internal_has_ue_version()) {
    _internal_mutable_ue_version()->::metahuman_service_api::UEVersion::MergeFrom(from._internal_ue_version());
  }
  if (from._internal_high_frequency_index() != 0) {
    _internal_set_high_frequency_index(from._internal_high_frequency_index());
  }
  if (!(from._internal_to_target_scale() <= 0 && from._internal_to_target_scale() >= 0)) {
    _internal_set_to_target_scale(from._internal_to_target_scale());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AutorigRequest::CopyFrom(const AutorigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metahuman_service_api.AutorigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutorigRequest::IsInitialized() const {
  return true;
}

void AutorigRequest::InternalSwap(AutorigRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutorigRequest, to_target_scale_)
      + sizeof(AutorigRequest::to_target_scale_)
      - PROTOBUF_FIELD_OFFSET(AutorigRequest, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AutorigRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_metahuman_5fservice_5fapi_2eproto_getter, &descriptor_table_metahuman_5fservice_5fapi_2eproto_once,
      file_level_metadata_metahuman_5fservice_5fapi_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metahuman_service_api
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Vertex* Arena::CreateMaybeMessage< ::metahuman_service_api::Vertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Mesh* Arena::CreateMaybeMessage< ::metahuman_service_api::Mesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Mesh >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Eyes* Arena::CreateMaybeMessage< ::metahuman_service_api::Eyes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Eyes >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Head* Arena::CreateMaybeMessage< ::metahuman_service_api::Head >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Head >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Parameters* Arena::CreateMaybeMessage< ::metahuman_service_api::Parameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::Quality* Arena::CreateMaybeMessage< ::metahuman_service_api::Quality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::Quality >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::UEVersion* Arena::CreateMaybeMessage< ::metahuman_service_api::UEVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::UEVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::metahuman_service_api::AutorigRequest* Arena::CreateMaybeMessage< ::metahuman_service_api::AutorigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::metahuman_service_api::AutorigRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
